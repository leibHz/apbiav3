"""
Sistema de Debug Avan√ßado para APBIA
Logging detalhado de todas as opera√ß√µes do sistema
"""

import logging
import sys
import json
from datetime import datetime
from functools import wraps
from flask import request, g
import time
import traceback
from colorama import Fore, Back, Style, init

# Inicializa colorama
init(autoreset=True)

class ColoredFormatter(logging.Formatter):
    """Formatter colorido para melhor visualiza√ß√£o no terminal"""
    
    COLORS = {
        'DEBUG': Fore.CYAN,
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.RED + Back.WHITE
    }
    
    def format(self, record):
        # Adiciona cor ao n√≠vel
        levelname = record.levelname
        if levelname in self.COLORS:
            record.levelname = f"{self.COLORS[levelname]}{levelname}{Style.RESET_ALL}"
        
        # Adiciona timestamps coloridos
        record.asctime = f"{Fore.BLUE}{self.formatTime(record)}{Style.RESET_ALL}"
        
        return super().format(record)


class APBIALogger:
    """Logger customizado para APBIA"""
    
    def __init__(self, name='APBIA'):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # Remove handlers existentes
        self.logger.handlers = []
        
        # Handler para console (colorido)
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.DEBUG)
        
        # Formato detalhado
        formatter = ColoredFormatter(
            '%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        console_handler.setFormatter(formatter)
        
        self.logger.addHandler(console_handler)
        
        # Handler para arquivo (logs persistentes)
        try:
            file_handler = logging.FileHandler('apbia_debug.log', encoding='utf-8')
            file_handler.setLevel(logging.DEBUG)
            file_formatter = logging.Formatter(
                '%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            file_handler.setFormatter(file_formatter)
            self.logger.addHandler(file_handler)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar arquivo de log: {e}")
    
    def debug(self, message, **kwargs):
        """Log de debug com dados extras"""
        self._log_with_context('DEBUG', message, **kwargs)
    
    def info(self, message, **kwargs):
        """Log de informa√ß√£o"""
        self._log_with_context('INFO', message, **kwargs)
    
    def warning(self, message, **kwargs):
        """Log de aviso"""
        self._log_with_context('WARNING', message, **kwargs)
    
    def error(self, message, **kwargs):
        """Log de erro"""
        self._log_with_context('ERROR', message, **kwargs)
    
    def critical(self, message, **kwargs):
        """Log cr√≠tico"""
        self._log_with_context('CRITICAL', message, **kwargs)
    
    def _log_with_context(self, level, message, **kwargs):
        """Log com contexto adicional"""
        # Adiciona contexto da requisi√ß√£o se dispon√≠vel
        try:
            if request:
                kwargs['endpoint'] = request.endpoint
                kwargs['method'] = request.method
                kwargs['path'] = request.path
                kwargs['ip'] = request.remote_addr
        except:
            pass
        
        # Formata mensagem com dados extras
        if kwargs:
            extra_info = " | " + " | ".join([f"{k}={v}" for k, v in kwargs.items()])
            message = message + extra_info
        
        # Faz log
        getattr(self.logger, level.lower())(message)
    
    def log_request(self, endpoint, method, path, user=None):
        """Log espec√≠fico para requisi√ß√µes HTTP"""
        user_info = f"User: {user}" if user else "User: Anonymous"
        self.info(
            f"üì• REQUEST",
            endpoint=endpoint,
            method=method,
            path=path,
            user=user_info
        )
    
    def log_response(self, endpoint, status_code, duration_ms):
        """Log espec√≠fico para respostas HTTP"""
        emoji = "‚úÖ" if status_code < 400 else "‚ùå"
        self.info(
            f"{emoji} RESPONSE",
            endpoint=endpoint,
            status=status_code,
            duration=f"{duration_ms:.2f}ms"
        )
    
    def log_database(self, operation, table, details=None):
        """Log espec√≠fico para opera√ß√µes de banco de dados"""
        self.debug(
            f"üóÑÔ∏è DATABASE {operation}",
            table=table,
            details=details or ""
        )
    
    def log_ai(self, operation, model, tokens=None, thinking=False):
        """Log espec√≠fico para opera√ß√µes de IA"""
        extra = f"Tokens: {tokens}" if tokens else ""
        if thinking:
            extra += " | Thinking Mode: ON"
        self.info(
            f"ü§ñ AI {operation}",
            model=model,
            extra=extra
        )
    
    def log_error_traceback(self, error):
        """Log de erro com traceback completo"""
        self.error(
            f"‚ùå EXCEPTION: {str(error)}\n{traceback.format_exc()}"
        )


# Inst√¢ncia global
logger = APBIALogger()


# ===== DECORATORS PARA AUTO-LOGGING =====

def log_function_call(func):
    """
    Decorator que loga automaticamente entrada e sa√≠da de fun√ß√µes
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        
        # Log de entrada
        args_repr = [repr(a) for a in args[:3]]  # Limita a 3 args
        kwargs_repr = {k: repr(v)[:50] for k, v in list(kwargs.items())[:3]}
        
        logger.debug(
            f"üîµ CALL {func_name}",
            args=args_repr,
            kwargs=kwargs_repr
        )
        
        start_time = time.time()
        
        try:
            result = func(*args, **kwargs)
            duration = (time.time() - start_time) * 1000
            
            # Log de sa√≠da (sucesso)
            logger.debug(
                f"‚úÖ RETURN {func_name}",
                duration=f"{duration:.2f}ms"
            )
            
            return result
            
        except Exception as e:
            duration = (time.time() - start_time) * 1000
            
            # Log de erro
            logger.error(
                f"‚ùå ERROR {func_name}",
                error=str(e),
                duration=f"{duration:.2f}ms"
            )
            logger.log_error_traceback(e)
            
            raise
    
    return wrapper


def log_route(func):
    """
    Decorator para rotas Flask que loga automaticamente requests/responses
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        # Captura dados da requisi√ß√£o
        g.start_time = time.time()
        
        endpoint = request.endpoint
        method = request.method
        path = request.path
        
        # User info
        from flask_login import current_user
        user = current_user.nome_completo if hasattr(current_user, 'nome_completo') and current_user.is_authenticated else None
        
        logger.log_request(endpoint, method, path, user)
        
        # Loga body (se POST/PUT)
        if method in ['POST', 'PUT', 'PATCH']:
            try:
                if request.is_json:
                    body = request.json
                    # Remove senhas do log
                    if 'senha' in body:
                        body = {**body, 'senha': '***'}
                    logger.debug(f"üì¶ BODY", data=str(body)[:200])
            except:
                pass
        
        try:
            # Executa rota
            result = func(*args, **kwargs)
            
            # Calcula dura√ß√£o
            duration_ms = (time.time() - g.start_time) * 1000
            
            # Determina status code
            if isinstance(result, tuple):
                status_code = result[1]
            else:
                status_code = 200
            
            logger.log_response(endpoint, status_code, duration_ms)
            
            return result
            
        except Exception as e:
            duration_ms = (time.time() - g.start_time) * 1000
            logger.log_response(endpoint, 500, duration_ms)
            logger.log_error_traceback(e)
            raise
    
    return wrapper


# ===== MIDDLEWARE PARA AUTO-LOGGING DE TODAS AS REQUESTS =====

def setup_request_logging(app):
    """
    Configura middleware para logging autom√°tico de todas as requisi√ß√µes
    """
    
    @app.before_request
    def log_request_start():
        """Loga in√≠cio da requisi√ß√£o"""
        g.start_time = time.time()
        
        # User info
        from flask_login import current_user
        user = current_user.nome_completo if hasattr(current_user, 'nome_completo') and current_user.is_authenticated else "Anonymous"
        
        logger.log_request(
            request.endpoint or "Unknown",
            request.method,
            request.path,
            user
        )
        
        # Loga query params se houver
        if request.args:
            logger.debug(f"üîç QUERY PARAMS", params=dict(request.args))
    
    @app.after_request
    def log_request_end(response):
        """Loga fim da requisi√ß√£o"""
        if hasattr(g, 'start_time'):
            duration_ms = (time.time() - g.start_time) * 1000
            logger.log_response(
                request.endpoint or "Unknown",
                response.status_code,
                duration_ms
            )
        
        return response
    
    @app.teardown_request
    def log_request_error(error=None):
        """Loga erros n√£o tratados"""
        if error:
            logger.log_error_traceback(error)
    
    logger.info("‚úÖ Request logging middleware configurado")


# ===== FUN√á√ïES AUXILIARES =====

def log_startup_info(app):
    """
    Loga informa√ß√µes de inicializa√ß√£o do app
    """
    logger.info("="*70)
    logger.info("üöÄ APBIA INICIANDO")
    logger.info("="*70)
    logger.info(f"Modo Debug: {app.config['DEBUG']}")
    logger.info(f"IA Status: {app.config.get('IA_STATUS', 'Unknown')}")
    logger.info(f"Modelo: {app.config.get('GEMINI_MODEL', 'Unknown')}")
    logger.info(f"Blueprints registrados: {list(app.blueprints.keys())}")
    logger.info("="*70)


def log_database_operation(operation, table, data=None, result=None):
    """
    Log espec√≠fico para opera√ß√µes de banco
    """
    logger.log_database(
        operation,
        table,
        details=f"Data: {str(data)[:100] if data else ''} | Result: {result}"
    )


def log_ai_usage(model, operation, tokens_input=None, tokens_output=None, thinking=False, search=False):
    """
    Log espec√≠fico para uso de IA
    """
    details = []
    if tokens_input:
        details.append(f"In: {tokens_input}")
    if tokens_output:
        details.append(f"Out: {tokens_output}")
    if thinking:
        details.append("Thinking: ON")
    if search:
        details.append("Search: USED")
    
    logger.log_ai(
        operation,
        model,
        tokens=" | ".join(details) if details else None,
        thinking=thinking
    )