ola claude, boa tarde, preciso de sua ajuda pra fazer um site de chatbot de ia, é bastante coisa entao vamos la

É o seguinte, o nome do projeto é apbia (ajudante de projetos pra bragantec baseado em IA)

O projeto é uma IA dá bragantec, uma feira de ciências do IFSP de Bragança Paulista, ele usa uma IA treinada pra melhor cohecimento da bragantec, seu treinamento é os arquivos txt que ela usatra de contexto ja que ela é multimodal, os txt são cadernos de resumos da bragantec das edições anteriores, ele usa a sua API gemini, usando a supabase pra armazenar o banco de dados, variaveis, buckets e etc...
os txts estraão nos buckts da supabase

A API Key do Google ai studio é: AIzaSyBhxdu9iXVPLZpQhen32l74nP2L_gm9evI
A API Key da supabase anon key é: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ldW5jeWJ3amp0bHJud3plZHhpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDI3NTIsImV4cCI6MjA3NDk3ODc1Mn0._xlpRKZAECtSwoYrURmHR3Xjv2fAgKkb6CAITRY-r7g
a api key da supabse secret key é: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ldW5jeWJ3amp0bHJud3plZHhpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTQwMjc1MiwiZXhwIjoyMDc0OTc4NzUyfQ.Fb1QqD4FS2TVim_xySXdgR4t7LKTI0eNm7c4zUesJzA
A URL da supabase é: https://oeuncybwjjtlrnwzedxi.supabase.co
a senha do banco de dados do supabase é: gaf11052009**
estou compartilhando apenas com vc isso, confio na sua segurança então estão seguradas, é pra usar elas no codigo caso nessesario
usaremos o supabase secrets pra armazernar essas variaveis

Para os ícones, usaremos o fonte awesome, com sua linha JS sendo: <script src="https://kit.fontawesome.com/cc533e21e1.js" crossorigin="anonymous"></script>

Aí vc escolhe os ícones no modo SVG e somente GRÁTIS, com algumas animações caso queira

tem dois tipos de IA

a ia pro participante da bragantec é acessada pelo prontuario (o BP) da escola e uma senha, caso nn tenha uma senha, é nessesario criar uma, o banco de dados deve verificar se a pessoa é participante e se não for, deve bloquear o acesso, ela ajuda a definir projetos e planejar eles, alem de ter acesso a algumas ferramentas.

as ferramentas é um executor de código nativo, deep research, e modo Canvas, com preview do site, algo tipo você mesmo gemini, com funções parecidas com as suas, ser multimodal pra interpretar arquivos, documentos áudios e imagens e por último o histórico de chats anteriores

A IA do orientador, pois todo participante da bragantec tem orientador ou opcionalmente um co-orientador, ela é um observadora, ele analisa os chats e oq o participante no qual ele tá orientando tá falando, dando um resumo sobre, ele pode adicionar notas as respostas da IA pra adicionar um detalhe ou corrigir uma informação, ele tem acesso ao histórico do participante, ou dos participantes

Um projeto pode ser feito por uma pessoa ou um grupo delas!, a IA tem que meio que sincronizar seu chat pra todas as pessoas do grupo e do orientador em tempo real, tipo um grupo do whatsapp mais com uma IA observando e respondendo quando achar nescessário, junto com o orientador, a IA seria uma espécie de "co-orientadora"

a personalidade das 2 deve ser mais "humana", não sei se é possível isso, mas se for, é uma ideia, as 2 terão personalizações diferentes

tera um sistema de login, onde o usuario poe o email senha e bp, mesma coisa pro orientador, mas nn tem como cadastrar pois a bragantec é pressencial, logo os dados do orientador e do participante é posto pelo adiministrador

O site deve ser de fácil manutenção, com um painel administrativo com um relatório de uso, relatório do servidor, contas cadastradas, etc..., ver limite da API e quanto dela foi usada, limitando os usuários a adicionando um delay a chegar em 80% do uso da API, ao exeder o limite tirar a IA do ar, mais salvar os dados dos usuários, o adimin pode tirar a IA do ar manualmente caso queira, e reativar ela manualmente depois, assim como o adimin pode adicionar os participantes e co-orientadores manualmente
os dados do usuário e do admin devem ser persistentes e não devem ser apagados a sair do site

aviso: nn vamos usar RAG, os arquivos txt serão mandados puros pra ia intepretar, o modelo que usarei (gemini 2.5 flash) tem essa capacidade como pode ver na documentação
https://ai.google.dev/gemini-api/docs/document-processing?hl=pt-br 

o gemini 2.5 flash é o sucessor do 1.5 flash como pode ver na documentação, ele é mais avançado e recente, por isso usaremos ele
https://ai.google.dev/gemini-api/docs/models?hl=pt-br

esses modelos suportam pensamento segundo a documentação, vmaos usar isso, o objetivo é ele pensar pra responder perguntas mais complexas, nem que demore pra responder
https://ai.google.dev/gemini-api/docs/thinking?hl=pt-br

O objetivo principal é ajudar os estudantes que vão participar da bragantec, auxiliando, planejando e dando ideias.

sera feito usando php, JS, html, tailwindCSS e python pro backend do banco de dados

no caso do python, devera ser usado o modelo MVC com controller, model, view e dao

o banco de dados esta pronto no supabase, enviarei o sql dele

CREATE TABLE public.arquivos_chat (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  mensagem_id bigint NOT NULL,
  nome_arquivo character varying NOT NULL,
  url_arquivo character varying NOT NULL,
  tipo_arquivo character varying,
  tamanho_bytes bigint,
  data_upload timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT arquivos_chat_pkey PRIMARY KEY (id),
  CONSTRAINT arquivos_chat_mensagem_id_fkey FOREIGN KEY (mensagem_id) REFERENCES public.mensagens(id)
);
CREATE TABLE public.chats (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  projeto_id bigint NOT NULL,
  tipo_ia_id bigint NOT NULL,
  titulo character varying NOT NULL,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT chats_pkey PRIMARY KEY (id),
  CONSTRAINT chats_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id),
  CONSTRAINT chats_tipo_ia_id_fkey FOREIGN KEY (tipo_ia_id) REFERENCES public.tipos_ia(id)
);
CREATE TABLE public.mensagens (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  chat_id bigint NOT NULL,
  usuario_id bigint,
  conteudo text NOT NULL,
  e_nota_orientador boolean DEFAULT false,
  data_envio timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT mensagens_pkey PRIMARY KEY (id),
  CONSTRAINT mensagens_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id),
  CONSTRAINT mensagens_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.usuarios(id)
);
CREATE TABLE public.orientadores_projetos (
  orientador_id bigint NOT NULL,
  projeto_id bigint NOT NULL,
  CONSTRAINT orientadores_projetos_pkey PRIMARY KEY (orientador_id, projeto_id),
  CONSTRAINT orientadores_projetos_orientador_id_fkey FOREIGN KEY (orientador_id) REFERENCES public.usuarios(id),
  CONSTRAINT orientadores_projetos_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id)
);
CREATE TABLE public.participantes_projetos (
  participante_id bigint NOT NULL,
  projeto_id bigint NOT NULL,
  CONSTRAINT participantes_projetos_pkey PRIMARY KEY (participante_id, projeto_id),
  CONSTRAINT participantes_projetos_participante_id_fkey FOREIGN KEY (participante_id) REFERENCES public.usuarios(id),
  CONSTRAINT participantes_projetos_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id)
);
CREATE TABLE public.projetos (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL,
  descricao text,
  area_projeto character varying NOT NULL,
  ano_edicao integer NOT NULL,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT projetos_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tipos_ia (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL UNIQUE,
  CONSTRAINT tipos_ia_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tipos_usuario (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL UNIQUE,
  CONSTRAINT tipos_usuario_pkey PRIMARY KEY (id)
);
CREATE TABLE public.usuarios (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome_completo character varying NOT NULL,
  email character varying NOT NULL UNIQUE,
  senha_hash character varying,
  tipo_usuario_id bigint NOT NULL,
  bp character varying UNIQUE,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  data_atualizacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT usuarios_pkey PRIMARY KEY (id),
  CONSTRAINT usuarios_tipo_usuario_id_fkey FOREIGN KEY (tipo_usuario_id) REFERENCES public.tipos_usuario(id)
);

usaremos classes no python para melhor organização junto com POO e MVC

o projeto ja tem o sistema de arquivos definido, como pode ver na pasta que enviei

Oq vc acha, consegue fazer tudo isso?
