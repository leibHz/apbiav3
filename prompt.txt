ola gemini, boa tarde, preciso de sua ajuda pra fazer um site de chatbot de ia, é bastante coisa entao vamos la

É o seguinte, o nome do projeto é apbia (assistente de projetos pra bragantec baseado em IA)

O projeto é uma IA dá bragantec, uma feira de ciências do IFSP de Bragança Paulista, ele usa uma IA treinada pra melhor cohecimento da bragantec, seu treinamento é os arquivos txt que ela usatra de contexto ja que ela é multimodal, os txt são cadernos de resumos da bragantec das edições anteriores, ele usa a sua API gemini, usando a supabase pra armazenar o banco de dados

A API Key do Google ai studio é: AIzaSyBhxdu9iXVPLZpQhen32l74nP2L_gm9evI
A API Key da supabase anon key é: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxZ3htZ294aXJ4bXV2b2t6Zmt6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwMDU5NTgsImV4cCI6MjA3NTU4MTk1OH0.i-obWMeuJ8hFDFZGiH6xEW-nVAwhSA7depCCKCbKdQ0
a api key da supabse secret key é: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxZ3htZ294aXJ4bXV2b2t6Zmt6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDAwNTk1OCwiZXhwIjoyMDc1NTgxOTU4fQ.BxyoJiplK8I6v-t2NdfLtWC9-iaNYPXGU5sjqq_4udY
A URL da supabase é: https://bqgxmgoxirxmuvokzfkz.supabase.co
a senha do banco de dados do supabase é: gaf11052009**
estou compartilhando apenas com vc isso, confio na sua segurança então estão seguradas, é pra usar elas no codigo caso nessesario

Para os ícones, usaremos o fonte awesome, com sua linha JS sendo: <script src="https://kit.fontawesome.com/cc533e21e1.js" crossorigin="anonymous"></script>

Aí vc escolhe os ícones no modo SVG e somente GRÁTIS, com algumas animações caso queira

a ia pro participante da bragantec é acessada pelo prontuario (o BP) da escola e uma senha, caso nn tenha uma senha, é nessesario criar uma, o banco de dados deve verificar se a pessoa é participante e se não for, deve bloquear o acesso, ela ajuda a definir projetos e planejar eles, alem de ter acesso a algumas ferramentas.

a personalidade da ia deve ser mais humana, não sei se isso é possivel

tera um sistema de login, onde o usuario poe o email senha e bp, mesma coisa pro orientador, mas nn tem como cadastrar pois a bragantec é pressencial, logo os dados do participante é posto pelo adiministrador

O site deve ser de fácil manutenção, com um painel administrativo mostrando as contas cadastradas, o adimin pode tirar a IA do ar manualmente caso queira, e reativar ela depois, assim como o adimin pode adicionar os participantes pelo painel 
os dados do usuário e do admin devem ser persistentes e não devem ser apagados a sair do site

aviso: nn vamos usar RAG, os arquivos txt serão mandados puros pra ia intepretar, o modelo que usarei (gemini 2.5 flash) tem essa capacidade como pode ver na documentação
https://ai.google.dev/gemini-api/docs/document-processing?hl=pt-br 

o gemini 2.5 flash é o sucessor do 1.5 flash como pode ver na documentação, ele é mais avançado e recente, por isso usaremos ele
https://ai.google.dev/gemini-api/docs/models?hl=pt-br

esses modelos suportam pensamento segundo a documentação, vmaos usar isso, o objetivo é ele pensar pra responder perguntas mais complexas, nem que demore pra responder, esse sera o modo PADRÂO da IA.
https://ai.google.dev/gemini-api/docs/thinking?hl=pt-br

O objetivo principal é ajudar os estudantes que vão participar da bragantec, auxiliando, planejando e dando ideias.

sera feito usando php, JS, html, boostrap e python pro backend do banco de dados
pesquise sobre boostrap para atualizar suas informações

no caso do python, devera ser usado o modelo MVC com controller, model, view e dao

o banco de dados esta pronto, enviarei o sql dele, precisamos adaptar esse script pro sql editor da supabase que nn usa o mysql normal, pesquise sobre como fazer essa adaptação

CREATE TABLE public.arquivos_chat (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  mensagem_id bigint NOT NULL,
  nome_arquivo character varying NOT NULL,
  url_arquivo character varying NOT NULL,
  tipo_arquivo character varying,
  tamanho_bytes bigint,
  data_upload timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT arquivos_chat_pkey PRIMARY KEY (id),
  CONSTRAINT arquivos_chat_mensagem_id_fkey FOREIGN KEY (mensagem_id) REFERENCES public.mensagens(id)
);
CREATE TABLE public.chats (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  projeto_id bigint NOT NULL,
  tipo_ia_id bigint NOT NULL,
  titulo character varying NOT NULL,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT chats_pkey PRIMARY KEY (id),
  CONSTRAINT chats_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id),
  CONSTRAINT chats_tipo_ia_id_fkey FOREIGN KEY (tipo_ia_id) REFERENCES public.tipos_ia(id)
);
CREATE TABLE public.mensagens (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  chat_id bigint NOT NULL,
  usuario_id bigint,
  conteudo text NOT NULL,
  e_nota_orientador boolean DEFAULT false,
  data_envio timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT mensagens_pkey PRIMARY KEY (id),
  CONSTRAINT mensagens_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id),
  CONSTRAINT mensagens_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES public.usuarios(id)
);
CREATE TABLE public.orientadores_projetos (
  orientador_id bigint NOT NULL,
  projeto_id bigint NOT NULL,
  CONSTRAINT orientadores_projetos_pkey PRIMARY KEY (orientador_id, projeto_id),
  CONSTRAINT orientadores_projetos_orientador_id_fkey FOREIGN KEY (orientador_id) REFERENCES public.usuarios(id),
  CONSTRAINT orientadores_projetos_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id)
);
CREATE TABLE public.participantes_projetos (
  participante_id bigint NOT NULL,
  projeto_id bigint NOT NULL,
  CONSTRAINT participantes_projetos_pkey PRIMARY KEY (participante_id, projeto_id),
  CONSTRAINT participantes_projetos_participante_id_fkey FOREIGN KEY (participante_id) REFERENCES public.usuarios(id),
  CONSTRAINT participantes_projetos_projeto_id_fkey FOREIGN KEY (projeto_id) REFERENCES public.projetos(id)
);
CREATE TABLE public.projetos (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL,
  descricao text,
  area_projeto character varying NOT NULL,
  ano_edicao integer NOT NULL,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT projetos_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tipos_ia (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL UNIQUE,
  CONSTRAINT tipos_ia_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tipos_usuario (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome character varying NOT NULL UNIQUE,
  CONSTRAINT tipos_usuario_pkey PRIMARY KEY (id)
);
CREATE TABLE public.usuarios (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  nome_completo character varying NOT NULL,
  email character varying NOT NULL UNIQUE,
  senha_hash character varying,
  tipo_usuario_id bigint NOT NULL,
  bp character varying UNIQUE,
  data_criacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  data_atualizacao timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT usuarios_pkey PRIMARY KEY (id),
  CONSTRAINT usuarios_tipo_usuario_id_fkey FOREIGN KEY (tipo_usuario_id) REFERENCES public.tipos_usuario(id)
);

usaremos classes no python para melhor organização junto com POO e MVC
pesquise sobre poo e mvc com dao pra atualizar suas informações

separe os arquivos pra melhor organização os arquivos dao serão todos juntos em um arquivo unico, assim como o model, o view e o controller

em caso de duvida em alguma coisa, SEMPRE PESQUISE e não invente informações

Oq vc acha, consegue fazer tudo isso